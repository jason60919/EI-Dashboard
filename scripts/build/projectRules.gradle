class ProjectVersion {
    private String version

    ProjectVersion(String version) {
        this.version = version
    }

    @Override
    String toString() {
        return this.version
    }
}


class ProjectRules {
    // Spaces in PCF
    private final String PRODUCTION = 'production'
    private final String DEVELOP = 'develop'
    private final String STAGE = 'stage'

    private final List SPACE = [
            DEVELOP,
            STAGE,
            PRODUCTION
    ]

    // Suffix for spaces
    private final String SFX_PRODUCTION = ''
    private final String SFX_STAGE = '-stage'
    private final String SFX_DEVELOP = '-develop'

    private final Map SUFFIX = [
            (DEVELOP)   : SFX_DEVELOP,
            (STAGE)     : SFX_STAGE,
            (PRODUCTION): SFX_PRODUCTION
    ]

    private final Project project
    private final String TO_SPACE = System
            .getProperty('pcf_space', DEVELOP)
            .toLowerCase()

    ProjectRules(Project project) {
        this.project = project
        if (!SPACE.contains(TO_SPACE)) {
            throw new GradleException("unsupported PCF space: $TO_SPACE")
        }
    }

    String getTargetSpace() {
        return this.TO_SPACE
    }

    /**
     * A function to extract version information from PCF's manifest.yml file.
     * By rule, each project has to add a line of version information inside
     * that file. An example is as follows:
     *
     *     applications:
     *     - name: ei-dashboard
     *       version: 0.1.0
     *       path: build/libs/ei-dashboard.war
     *       services:
     *         - PSQL-Dashboard
     *
     * @return The version information with string format.
     */
    ProjectVersion determineVersion() {
        File manifest = new File(project.projectDir, 'manifest.yml')
        if (!manifest.exists()) {
            throw new GradleException("file doesn't exist: $manifest")
        } else {
            List<String> lines = manifest.readLines()
            for (int i = 0; i < lines.size(); i++) {
                String[] items = lines[i].split(':')
                if (items.size() == 2) {
                    String key = items[0].trim()
                    String value = items[1].trim()
                    if (key.equalsIgnoreCase('version')) {
                        return new ProjectVersion(value)
                    }
                }
            }
            throw new GradleException(
                    "no version defined in manifest: $manifest"
            )
        }
    }

    /**
     * Calculate reasonable application library path to be pushed
     * to PCF by rules. It currently only support either war or jar type
     * for java system.
     *
     * @param absolutely The path should use absolutely or not.
     *        Default is true.
     * @return The application path to be pushed to PCF.
     */
    String getReasonableAppLibPath(absolutely = true) {
        // For applications to be pushed, we assume that they are
        // generated in build/libs directory
        String prefix = String.join(File.separator, [
                project.buildDir.absolutePath,
                'libs',
                project.name + '-' + project.version
        ])

        List<File> candidates = [
                new File(prefix + '.war'),
                new File(prefix + '.jar')
        ]

        File pcfAppPath = null
        for (int i = 0; i < candidates.size(); i++) {
            if (candidates[i].exists()) {
                pcfAppPath = candidates[i]
                break
            }
        }

        if (null == pcfAppPath) {
            String errMsg = 'Cannot find files to push in order:\n'
            for (int i = 0; i < candidates.size(); i++) {
                errMsg += '* ' + candidates[i] + '\n'
            }
            throw new GradleException(errMsg)
        }

        return absolutely ? pcfAppPath.absolutePath : pcfAppPath.name
    }

    /**
     * Make application name on PCF.
     * By rule, the name should look like 'projectName-1.3.0'. You can remove
     * the part of version via giving withVersion to false.
     *
     * @param withVersion If the application name includes version number
     * @return The PCF application name.
     */
    String getPCFappName(withVersion = true) {
        List tokens = []

        tokens += project.name
        if (withVersion) {
            tokens += project.version.toString()
        }
        return String.join('-', tokens)
    }

    /**
     * Make application hostname to be used in PCF.
     * By rule, the hostname should look like 'projectName-1-3-0'. You can
     * remove the part of version via giving withVersion to false.
     *
     * @return The PCF application hostname.
     */
    String getPCFappHostname(withVersion = true, withSuffix = true) {
        String hostname = getPCFappName(withVersion).replace('.', '-')
        return withSuffix ? (hostname + SUFFIX[TO_SPACE]) : hostname
    }
}

// Initiate a rules and attach to be a property of project
ext {
    rules = new ProjectRules(project)
}

// Determine and assign version to this project.
// 'version' is a native property inside project, ext not need here.
version = rules.determineVersion()

// Custom task to generate build/libs/manifest.yml for QA.
task makeManifest(dependsOn: build) {
    group 'advantech'
    description 'Make an official manifest.yml for PCF'

    doLast {
        copy {
            from "scripts/build"
            into "build/libs"
            include 'manifest-*.template.yml'

            rename { filename ->
                println "file: $filename"
                filename - '.template'
            }

            // Substitute property tokens infile
            String appVersion = project.version.toString()
            expand(
                    pcfAppName: rules.getPCFappName(),
                    pcfAppLibPath: rules.getReasonableAppLibPath(false),
                    pcfAppHostname: rules.getPCFappHostname(false, false),
                    pcfAppVersion: appVersion.replace('.', '-'),
            )
        }
    }
}

// Custom task to push application to PCF per our rules.
task pushToPCF(dependsOn: makeManifest) {
    group 'advantech'
    description 'Push the project to PCF environment.'

    doLast {
        exec {
            String manifest = String.format(
                    "build/libs/manifest-%s.yml", rules.getTargetSpace())
            commandLine 'cf', 'push', '-f', manifest
        }
    }
}

